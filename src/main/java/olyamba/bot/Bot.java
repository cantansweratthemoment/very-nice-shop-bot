package olyamba.bot;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.CallbackQuery;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardButton;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import com.pengrad.telegrambot.request.*;
import com.pengrad.telegrambot.response.SendResponse;
import olyamba.shop.CustomerService;
import olyamba.shop.ProductsService;

import java.util.Map;

public class Bot {
    private final TelegramBot bot = new TelegramBot(System.getenv("BOT_TOKEN"));
    private static boolean waitingForMail = false;
    private static boolean ordering = false;

    public void serve() {
        bot.setUpdatesListener(updates -> {
            updates.forEach(this::process);
            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
    }

    private void process(Update update) {
        Message message = update.message();
        CallbackQuery callbackQuery = update.callbackQuery();
        if (message != null) {
            long chatId = update.message().chat().id();
            if (waitingForMail) {
                CustomerService.addCustomer(message.from().username(), message.text().split(" ")[0], message.text().split(" ")[1]);
                waitingForMail = false;
                SendResponse response = bot.execute(new SendMessage(chatId, "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é (Ôæâ¬¥ –∑ `)„Éé"));
            }
            SendResponse response = bot.execute(new SendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?(/‚ñΩÔºº*)ÔΩ°o‚óã‚ô°").replyMarkup(getStartKeyboard()));
        } else if (callbackQuery != null) {
            answerForCallback(callbackQuery);
        }
    }

    private void answerForCallback(CallbackQuery callbackQuery) {
        switch (callbackQuery.data()) {
            case "register" -> {
                waitingForMail = true;
                SendResponse response = bot.execute(new SendMessage(callbackQuery.message().chat().id(), "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª(¬¥‚Ä¢ œâ ‚Ä¢`) ‚ô°"));
            }
            case "order" -> {
                ordering = true;
                SendResponse response = bot.execute(new SendMessage(callbackQuery.message().chat().id(), "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?‚ï∞(‚ñî‚àÄ‚ñî)‚ïØ").replyMarkup(getOrderKeyboard()));
            }
            default -> {
                if (callbackQuery.data().split(" ")[0].equals("product")) {
                    String productType = callbackQuery.data().split(" ")[1];
                    if (ProductsService.order(productType)) {
                        SendResponse response = bot.execute(new SendMessage(callbackQuery.message().chat().id(), "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π!„ÉΩ(*„Éªœâ„Éª)Ôæâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫(=`œâ¬¥=)"));
                    } else {
                        SendResponse response = bot.execute(new SendMessage(callbackQuery.message().chat().id(), "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è(Œº_Œº)"));
                    }
                } else {
                    SendResponse response = bot.execute(new SendMessage(callbackQuery.message().chat().id(), "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –≤—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ."));
                }
            }
        }
    }

    private InlineKeyboardMarkup getOrderKeyboard() {
        Map<String, String> products = ProductsService.getProducts();
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        assert products != null;
        for (Map.Entry<String, String> entry :
                products.entrySet()) {
            inlineKeyboardMarkup.addRow(new InlineKeyboardButton(entry.getKey()).callbackData("product " + entry.getValue()));
        }
        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getStartKeyboard() {
        return new InlineKeyboardMarkup(
                new InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—èüòç").callbackData("register"),
                new InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üêà").callbackData("order"));
    }
}